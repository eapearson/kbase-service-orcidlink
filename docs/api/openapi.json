{
    "openapi": "3.1.0",
    "info": {
        "title": "ORCID Link Service",
        "description": "The *ORCID Link Service* provides an API to enable the linking of a KBase\n user account to an ORCID account. This \"link\" consists of a [Link\n Record](#user-content-header_type_linkrecord) which contains a KBase username, ORCID\n id, ORCID access token, and a few other fields. This link record allows KBase to create\n tools and services which utilize the ORCID api to view or modify certain aspects of a\n users ORCID profile.\n\nOnce connected, *ORCID Link* enables certain integrations, including:\n\n- syncing your KBase profile from your ORCID profile\n- creating and managing KBase public Narratives within your ORCID profile",
        "termsOfService": "https://www.kbase.us/about/terms-and-conditions-v2/",
        "contact": {
            "name": "KBase, Lawrence Berkeley National Laboratory, DOE",
            "url": "https://www.kbase.us/",
            "email": "engage@kbase.us"
        },
        "license": {
            "name": "The MIT License",
            "url": "https://github.com/kbase/kb_sdk/blob/develop/LICENSE.md"
        },
        "version": "0.1.0"
    },
    "paths": {
        "/api/v1": {
            "post": {
                "tags": [
                    "jsonrpc"
                ],
                "summary": "Entrypoint",
                "operationId": "entrypoint_api_v1_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/_Request"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_Response"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Default Response"
                    },
                    "210": {
                        "description": "[1010] Authorization Required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_AuthorizationRequiredError_"
                                }
                            }
                        }
                    },
                    "211": {
                        "description": "[1011] Not Authorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_NotAuthorizedError_"
                                }
                            }
                        }
                    },
                    "212": {
                        "description": "[1020] Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_NotFoundError_"
                                }
                            }
                        }
                    },
                    "213": {
                        "description": "[-32602] Invalid params\n\nInvalid method parameter(s)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_InvalidParams_"
                                }
                            }
                        }
                    },
                    "214": {
                        "description": "[-32601] Method not found\n\nThe method does not exist / is not available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_MethodNotFound_"
                                }
                            }
                        }
                    },
                    "215": {
                        "description": "[-32700] Parse error\n\nInvalid JSON was received by the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_ParseError_"
                                }
                            }
                        }
                    },
                    "216": {
                        "description": "[-32600] Invalid Request\n\nThe JSON sent is not a valid Request object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_InvalidRequest_"
                                }
                            }
                        }
                    },
                    "217": {
                        "description": "[-32603] Internal error\n\nInternal JSON-RPC error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/_ErrorResponse_InternalError_"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/linking-sessions/{session_id}/oauth/start": {
            "get": {
                "tags": [
                    "linking-sessions"
                ],
                "summary": "Start Linking Session",
                "description": "Start Linking Session\n\nThis endpoint is designed to be used directly by the browser. It is the \"start\"\nof the ORCID OAuth flow. If the provided session id is found and the associated\nsession record is still in the initial state, it will initiate the OAuth flow\nby redirecting the browser to an endpoint at ORCID.\n\nStarts a \"linking session\", an interactive OAuth flow the end result of which is an\naccess_token stored at KBase for future use by the user.",
                "operationId": "start_linking_session_linking_sessions__session_id__oauth_start_get",
                "parameters": [
                    {
                        "name": "session_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 36,
                            "maxLength": 36,
                            "description": "The linking session id",
                            "title": "Session Id"
                        },
                        "description": "The linking session id"
                    },
                    {
                        "name": "return_link",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "A url to redirect to after the entire linking is complete; not to be confused with the ORCID OAuth flow's redirect_url",
                            "title": "Return Link"
                        },
                        "description": "A url to redirect to after the entire linking is complete; not to be confused with the ORCID OAuth flow's redirect_url"
                    },
                    {
                        "name": "skip_prompt",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "description": "Whether to prompt for confirmation of linking",
                            "title": "Skip Prompt"
                        },
                        "description": "Whether to prompt for confirmation of linking"
                    },
                    {
                        "name": "ui_options",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "description": "Opaque string of ui options",
                            "default": "",
                            "title": "Ui Options"
                        },
                        "description": "Opaque string of ui options"
                    },
                    {
                        "name": "kbase_session",
                        "in": "cookie",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "KBase auth token taken from a cookie named 'kbase_session'",
                            "title": "Kbase Session"
                        },
                        "description": "KBase auth token taken from a cookie named 'kbase_session'"
                    },
                    {
                        "name": "kbase_session_backup",
                        "in": "cookie",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "KBase auth token taken from a cookie named 'kbase_session_backup. Required in the KBase production environment since the prod ui and services operate on different hosts; the primary cookie, kbase_session, is host-based so cannot be read by a prod service.",
                            "title": "Kbase Session Backup"
                        },
                        "description": "KBase auth token taken from a cookie named 'kbase_session_backup. Required in the KBase production environment since the prod ui and services operate on different hosts; the primary cookie, kbase_session, is host-based so cannot be read by a prod service."
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to ORCID if a valid linking session, back to KBase in the case of an error"
                    },
                    "401": {
                        "description": "KBase auth token absent or invalid"
                    },
                    "422": {
                        "description": "Input or output data does not comply with the API schema"
                    }
                }
            }
        },
        "/linking-sessions/oauth/continue": {
            "get": {
                "tags": [
                    "linking-sessions"
                ],
                "summary": "Linking Sessions Continue",
                "description": "Continue Linking Session\n\nThis endpoint implements the handoff from from the ORCID authorization step in\nthe ORCID OAuth flow. That is, it\nserves as the redirection target after the user has successfully completed\ntheir interaction with ORCID, at which they may have logged in and provided\ntheir consent to issuing the linking token to KBase.\n\nNote that this is an interstitional endpoint, which does not have its own\nuser interface. Rather, it redirects to kbase-ui when finished. If an error is\nencountered, it redirects to an error viewing endpoint in kbase-ui.",
                "operationId": "linking_sessions_continue_linking_sessions_oauth_continue_get",
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "For a success case, contains an OAuth exchange code parameter",
                            "title": "Code"
                        },
                        "description": "For a success case, contains an OAuth exchange code parameter"
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "For a success case, contains an OAuth state parameter",
                            "title": "State"
                        },
                        "description": "For a success case, contains an OAuth state parameter"
                    },
                    {
                        "name": "error",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "For an error case, contains an error code parameter",
                            "title": "Error"
                        },
                        "description": "For an error case, contains an error code parameter"
                    },
                    {
                        "name": "kbase_session",
                        "in": "cookie",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "KBase auth token taken from a cookie named 'kbase_session'",
                            "title": "Kbase Session"
                        },
                        "description": "KBase auth token taken from a cookie named 'kbase_session'"
                    },
                    {
                        "name": "kbase_session_backup",
                        "in": "cookie",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "KBase auth token taken from a cookie named 'kbase_session_backup. Required in the KBase production environment since the prod ui and services operate on different hosts; the primary cookie, kbase_session, is host-based so cannot be read by a prod service.",
                            "title": "Kbase Session Backup"
                        },
                        "description": "KBase auth token taken from a cookie named 'kbase_session_backup. Required in the KBase production environment since the prod ui and services operate on different hosts; the primary cookie, kbase_session, is host-based so cannot be read by a prod service."
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to the continuation page; or error page"
                    },
                    "401": {
                        "description": "Linking requires authorization; same meaning as standard auth 401, but caught and issued in a different manner"
                    },
                    "422": {
                        "description": "Input or output data does not comply with the API schema"
                    }
                }
            }
        },
        "/docs": {
            "get": {
                "tags": [
                    "misc"
                ],
                "summary": "Docs",
                "description": "Get API Documentation\n\nProvides a web interface to the auto-generated API docs.",
                "operationId": "docs_docs_get",
                "responses": {
                    "200": {
                        "description": "Successfully returned the api docs",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AuthorizationRequiredError": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": 1010,
                        "example": 1010
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Authorization Required",
                        "example": "Authorization Required"
                    }
                },
                "type": "object",
                "title": "AuthorizationRequiredError"
            },
            "InternalError": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": -32603,
                        "example": -32603
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Internal error",
                        "example": "Internal error"
                    }
                },
                "type": "object",
                "title": "InternalError"
            },
            "InvalidParams": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": -32602,
                        "example": -32602
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Invalid params",
                        "example": "Invalid params"
                    },
                    "data": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/_ErrorData__Error_"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "title": "InvalidParams"
            },
            "InvalidRequest": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": -32600,
                        "example": -32600
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Invalid Request",
                        "example": "Invalid Request"
                    },
                    "data": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/_ErrorData__Error_"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "type": "object",
                "title": "InvalidRequest"
            },
            "MethodNotFound": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": -32601,
                        "example": -32601
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Method not found",
                        "example": "Method not found"
                    }
                },
                "type": "object",
                "title": "MethodNotFound"
            },
            "NotAuthorizedError": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": 1011,
                        "example": 1011
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Not Authorized",
                        "example": "Not Authorized"
                    }
                },
                "type": "object",
                "title": "NotAuthorizedError"
            },
            "NotFoundError": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": 1020,
                        "example": 1020
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Not Found",
                        "example": "Not Found"
                    }
                },
                "type": "object",
                "title": "NotFoundError"
            },
            "ParseError": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "default": -32700,
                        "example": -32700
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "default": "Parse error",
                        "example": "Parse error"
                    }
                },
                "type": "object",
                "title": "ParseError"
            },
            "_Error": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Loc"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Msg"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type"
                    },
                    "ctx": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Ctx"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "_Error"
            },
            "_ErrorData__Error_": {
                "properties": {
                    "errors": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/_Error"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Errors"
                    }
                },
                "type": "object",
                "title": "_ErrorData[_Error]"
            },
            "_ErrorResponse_AuthorizationRequiredError_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/AuthorizationRequiredError"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[AuthorizationRequiredError]"
            },
            "_ErrorResponse_InternalError_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/InternalError"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[InternalError]"
            },
            "_ErrorResponse_InvalidParams_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/InvalidParams"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[InvalidParams]"
            },
            "_ErrorResponse_InvalidRequest_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/InvalidRequest"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[InvalidRequest]"
            },
            "_ErrorResponse_MethodNotFound_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/MethodNotFound"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[MethodNotFound]"
            },
            "_ErrorResponse_NotAuthorizedError_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/NotAuthorizedError"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[NotAuthorizedError]"
            },
            "_ErrorResponse_NotFoundError_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/NotFoundError"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[NotFoundError]"
            },
            "_ErrorResponse_ParseError_": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "error": {
                        "$ref": "#/components/schemas/ParseError"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "error"
                ],
                "title": "_ErrorResponse[ParseError]"
            },
            "_Request": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "method": {
                        "type": "string",
                        "title": "Method"
                    },
                    "params": {
                        "type": "object",
                        "title": "Params"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "method"
                ],
                "title": "_Request"
            },
            "_Response": {
                "properties": {
                    "jsonrpc": {
                        "type": "string",
                        "enum": [
                            "2.0"
                        ],
                        "const": "2.0",
                        "title": "Jsonrpc",
                        "default": "2.0",
                        "example": "2.0"
                    },
                    "id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Id",
                        "example": 0
                    },
                    "result": {
                        "type": "object",
                        "title": "Result"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "jsonrpc",
                    "id",
                    "result"
                ],
                "title": "_Response"
            }
        }
    },
    "tags": [
        {
            "name": "jsonrpc",
            "description": "JSON-RPC 2.0 method"
        },
        {
            "name": "misc",
            "description": "Miscellaneous operations"
        },
        {
            "name": "link",
            "description": "Access to and control over stored ORCID Links"
        },
        {
            "name": "linking-sessions",
            "description": "OAuth integration and internal support for creating ORCID Links.\n\nThe common path element is `/linking-sessions`.\n\nSome of the endpoints are \"browser interactive\", meaning that the links are followed\ndirectly by the browser, rather than being used within Javascript code."
        },
        {
            "name": "orcid",
            "description": "Direct access to ORCID via ORCID Link"
        },
        {
            "name": "works",
            "description": "Add, remove, update 'works' records for a user's ORCID Account"
        }
    ]
}